/**********************************************************************
Copyright (c) 2018 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
********************************************************************/

#version 450
#extension GL_GOOGLE_include_directive : enable

#include "common.h"
#define MAX_TEXTURES 512

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) buffer AoBuffer { uvec2 aoBuffer[]; };
layout(binding = 1) buffer Color    { uint  color[];    };
layout(binding = 2) buffer Ids      { uint  ids[];      };
layout(binding = 3) buffer RayCount { uint  rayCount;   };
layout(binding = 4) buffer Hits     { Hit   hits[];     };
layout(binding = 5) buffer Shapes   { Shape shapes[];   };
layout(binding = 6) buffer Indices  { uint  indices[];    };
layout(binding = 7) buffer Vertices { float vertices[];   };
layout(binding = 8) buffer Materials { Material materials[]; };
layout(binding = 9) uniform sampler2D textures[MAX_TEXTURES];

Vertex LoadVertex(in uint index)
{
    Vertex vertex;

    uint i = 12 * index;

    vertex.position.x = vertices[i++];
    vertex.position.y = vertices[i++];
    vertex.position.z = vertices[i++];

    vertex.normal.x = vertices[i++];
    vertex.normal.y = vertices[i++];
    vertex.normal.z = vertices[i++];

    vertex.texcoords.x = vertices[i++];
    vertex.texcoords.y = vertices[i++];
    ++i;    // unused padding

    vertex.color.x = vertices[i++];
    vertex.color.y = vertices[i++];
    vertex.color.z = vertices[i++];

    return vertex;
}

uint PackColor(in vec4 color)
{
    return
        ((uint(color.a * 255.0f) & 0xffu) << 24) |
        ((uint(color.r * 255.0f) & 0xffu) << 16) |
        ((uint(color.g * 255.0f) & 0xffu) << 8 ) |
        ((uint(color.b * 255.0f) & 0xffu) << 0 );
}

void main()
{
    // Read the intersection data
    const uint tid = gl_GlobalInvocationID.x;
    if (tid >= rayCount)
    {
        return; // out of bounds
    }
    const Hit hit = hits[tid];

    // If we hit something, go black otherwise, go white
    const uint pixel_idx = ids[tid];
    aoBuffer[pixel_idx] += uvec2(hit.shape_id == INVALID_ADDR ? 1 : 0, 1);
    float pixel_color = sqrt(float(aoBuffer[pixel_idx].x) / float(aoBuffer[pixel_idx].y));
    // Check if we've hit some geometry
    if (hit.shape_id != INVALID_ADDR)
    {
        // Otherwise, load the vertices
        Shape shape = shapes[hit.shape_id];
        Vertex v0 = LoadVertex(shape.base_vertex + indices[shape.first_index + 3 * hit.prim_id + 0]);
        Vertex v1 = LoadVertex(shape.base_vertex + indices[shape.first_index + 3 * hit.prim_id + 1]);
        Vertex v2 = LoadVertex(shape.base_vertex + indices[shape.first_index + 3 * hit.prim_id + 2]);

        Material mat = materials[shape.material];
        vec3 c = mat.albedo;
        if (mat.albedo_map != INVALID_ADDR)
        {
            vec2 uv = v1.texcoords * hit.uv.x + v2.texcoords * hit.uv.y +
                              v0.texcoords * (1.0f - hit.uv.x - hit.uv.y);
            vec4 tex_color = texture(textures[mat.albedo_map], uv);
            c *= tex_color.xyz;
            color[pixel_idx] = PackColor(vec4(c + vec3(pixel_color), 1.0f));
        }
        else
        {
            color[pixel_idx] = PackColor(vec4(c, 1.0f));
        }
        return;
    }

    // Write the color out to memory
    //color[pixel_idx] = PackColor(vec4(vec3(pixel_color), 1.0f));
}
